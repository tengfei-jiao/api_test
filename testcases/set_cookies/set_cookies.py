# NOTE: Generated By HttpRunner v3.1.4
# FROM: har\mubu_login.har


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase

"""
登录调测：
（1）录制脚本，会有gettoken的接口，如果不将token的值到下面的信息头，无法持续自动化
（2）进入模块后，cookies里面有3个变量是从登录传递下来的，从登录中提取JESSIONID，
.with_jmespath("data.headers.TGC","TGC")
.with_jmespath("data.cookies.genex-session","genex-session")
.with_jmespath("data.cookies.fusiongis-session","fusiongis-session")
（3）解决了重定向的接口返回200的问题：因为requests库自动处理了重定向请求1，请求2，直到返回200，所以需要设置禁止重定向
allow_redirects=False，然后返回的接口就是302了，可以提取这里面的cookies
（4）注释掉断言，断言是302，然后报错判断失败的问题解决。
（4）所有重定向的接口，返回的data.headers.location值需要传递到下个接口的url
（5）替换base_url
（6）设置全局变量，url、user、password
（7）切换测试环境后，报错，登录的某个入参需要从get/login中获取，它的返回时html
"""



class TestCaseMubuLogin(HttpRunner):

    config = (
        Config("login mubu")
        .variables(phone="${ENV(username)}", password="${ENV(password)}", host="${ENV(host)}")
        .verify(False)
        .base_url("https://${host}")
        .export(*["unreadCount"])
    )

    teststeps = [
        Step(
            RunRequest("/api/login/submit")
            .post("/api/login/submit")
            .with_headers(
                **{
                    "Host": "${host}",
                    "Connection": "keep-alive",
                    "Content-Length": "47",
                    "Accept": "application/json, text/javascript, */*; q=0.01",
                    "X-Requested-With": "XMLHttpRequest",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36",
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "Origin": "https://${host}",
                    "Sec-Fetch-Site": "same-origin",
                    "Sec-Fetch-Mode": "cors",
                    "Sec-Fetch-Dest": "empty",
                    "Referer": "https://${host}/login/password",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Cookie": "data_unique_id=5af8ec14-0e06-45fb-948e-5852d15f593a; _ga=GA1.2.575825054.1617539185; _gid=GA1.2.961331060.1617973416; reg_entrance=https%3A%2F%2F${host}%2F; language=en-US; country=US; Hm_lvt_4426cbb0486a79ea049b4ad52d81b504=1617805446,1617820067,1617981171,1618017226; csrf_token=2ebd2cd9-e587-47d4-b8e3-6bb81d9fe9ce; SESSION=30786ff7-4a20-4a5c-b5aa-9d56f3586db4; _gat=1; reg_prepareId=178b9ae33da-178b9ae33d3-4763-bcdf-9510a0eb4440; reg_focusId=5247c4c4-c1ff-4763-bcdf-178b9ae36b3; SLARDAR_WEB_ID=8d09bf6a-a457-4c0e-a070-fd54f2c2279f; Hm_lpvt_4426cbb0486a79ea049b4ad52d81b504=1618022906",
                }
            )
            .with_cookies(
                **{
                    "data_unique_id": "5af8ec14-0e06-45fb-948e-5852d15f593a",
                    "_ga": "GA1.2.575825054.1617539185",
                    "_gid": "GA1.2.961331060.1617973416",
                    "reg_entrance": "https%3A%2F%2F${host}%2F",
                    "language": "en-US",
                    "country": "US",
                    "Hm_lvt_4426cbb0486a79ea049b4ad52d81b504": "1617805446,1617820067,1617981171,1618017226",
                    "csrf_token": "2ebd2cd9-e587-47d4-b8e3-6bb81d9fe9ce",
                    "SESSION": "30786ff7-4a20-4a5c-b5aa-9d56f3586db4",
                    "_gat": "1",
                    "reg_prepareId": "178b9ae33da-178b9ae33d3-4763-bcdf-9510a0eb4440",
                    "reg_focusId": "5247c4c4-c1ff-4763-bcdf-178b9ae36b3",
                    "SLARDAR_WEB_ID": "8d09bf6a-a457-4c0e-a070-fd54f2c2279f",
                    "Hm_lpvt_4426cbb0486a79ea049b4ad52d81b504": "1618022906",
                }
            )
            
            # 这里的的入参$host,不能使用${host}，带大括号的话会导致无法识别变量host
            .with_data(
                {"phone": "${phone}", "password": "${password}", "remember": "true", "execution": "${get_execution($host)}"}
            )
            # 提取返回的参数,将某值传递给变量unreadCount
            .extract()
            .with_jmespath("body.code", "unreadCount")
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json;charset=UTF-8")
            .assert_equal("body.code", 0)
            .assert_equal("body.msg", None)
        ),
    ]


if __name__ == "__main__":
    TestCaseMubuLogin().test_start()
